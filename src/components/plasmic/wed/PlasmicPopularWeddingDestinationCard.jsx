// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ciGKDfqapgtMVQBmmP938S
// Component: K3BSu0MBimVJ
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariants_6Fj7GnKse2OD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6Fj7gnKse2oD/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ciGKDfqapgtMVQBmmP938S/projectcss
import sty from "./PlasmicPopularWeddingDestinationCard.module.css"; // plasmic-import: K3BSu0MBimVJ/css
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 9Qp4AnlBM4iC/icon

createPlasmicElementProxy;

export const PlasmicPopularWeddingDestinationCard__VariantProps = new Array();

export const PlasmicPopularWeddingDestinationCard__ArgProps = new Array(
  "image",
  "title"
);

const $$ = {};

function PlasmicPopularWeddingDestinationCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image:
            "https://images.unsplash.com/photo-1589356334553-09e6a9a3b42c?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGluZGlhJTIwZ2F0ZXxlbnwwfDF8MHx8fDA%3D",
          title: "Mumbai"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Fj7GnKse2OD()
  });
  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      href={(() => {
        try {
          return `/search?city=${$props.title}`;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"react"}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "80vw" : "22vw"
        }
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "80vw" : "22vw"
        }
        height={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "80vw" : "22vw"
        }
        loading={"lazy"}
        src={(() => {
          try {
            return $props.image;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "80vw" : "22vw"
        }
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          size={"small"}
          type={"default"}
        >
          <Icon38Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </AntdButton>
      </div>
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox", "text", "button", "svg"],
  img: ["img"],
  freeBox: ["freeBox", "text", "button", "svg"],
  text: ["text"],
  button: ["button", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPopularWeddingDestinationCard__ArgProps,
          internalVariantPropNames:
            PlasmicPopularWeddingDestinationCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPopularWeddingDestinationCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPopularWeddingDestinationCard";
  } else {
    func.displayName = `PlasmicPopularWeddingDestinationCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPopularWeddingDestinationCard = Object.assign(
  // Top-level PlasmicPopularWeddingDestinationCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicPopularWeddingDestinationCard
    internalVariantProps: PlasmicPopularWeddingDestinationCard__VariantProps,
    internalArgProps: PlasmicPopularWeddingDestinationCard__ArgProps
  }
);

export default PlasmicPopularWeddingDestinationCard;
/* prettier-ignore-end */
