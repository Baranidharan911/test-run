// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ciGKDfqapgtMVQBmmP938S
// Component: HD_oqaS3qlsa
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SectionWrapperButton from "../../SectionWrapperButton"; // plasmic-import: to7sEd8fDz-x/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { useScreenVariants as useScreenVariants_6Fj7GnKse2OD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6Fj7gnKse2oD/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ciGKDfqapgtMVQBmmP938S/projectcss
import sty from "./PlasmicSectionCardWrapper.module.css"; // plasmic-import: HD_oqaS3qlsa/css

createPlasmicElementProxy;

export const PlasmicSectionCardWrapper__VariantProps = new Array("noButton");

export const PlasmicSectionCardWrapper__ArgProps = new Array(
  "title",
  "btnName",
  "btnLink",
  "cards2"
);

const $$ = {};

function PlasmicSectionCardWrapper__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Popular Venues",
          btnName: "View All Venues"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "noButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noButton
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Fj7GnKse2OD()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootnoButton]: hasVariant($state, "noButton", "noButton") }
      )}
    >
      <div
        data-plasmic-name={"headContent"}
        data-plasmic-override={overrides.headContent}
        className={classNames(projectcss.all, sty.headContent)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textnoButton]: hasVariant($state, "noButton", "noButton") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Popular Venues";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <SectionWrapperButton
          btnLink={args.btnLink}
          btnName={args.btnName}
          className={classNames(
            "__wab_instance",
            sty.sectionWrapperButton__fuv3U,
            {
              [sty.sectionWrapperButtonnoButton__fuv3U18T2S]: hasVariant(
                $state,
                "noButton",
                "noButton"
              )
            }
          )}
        />
      </div>
      <div
        data-plasmic-name={"cards"}
        data-plasmic-override={overrides.cards}
        className={classNames(projectcss.all, sty.cards)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iXn1R)}
            >
              <Reveal
                children={null}
                className={classNames("__wab_instance", sty.reveal__wPq6T)}
                triggerOnce={true}
              />
            </Stack__>
          ),

          value: args.cards2
        })}
      </div>
      {(
        hasVariant($state, "noButton", "noButton")
          ? true
          : hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : false
      ) ? (
        <SectionWrapperButton
          btnLink={args.btnLink}
          btnName={args.btnName}
          className={classNames(
            "__wab_instance",
            sty.sectionWrapperButton__nFgBj,
            {
              [sty.sectionWrapperButtonnoButton__nFgBj18T2S]: hasVariant(
                $state,
                "noButton",
                "noButton"
              )
            }
          )}
        />
      ) : null}
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "headContent", "text", "cards"],
  headContent: ["headContent", "text"],
  text: ["text"],
  cards: ["cards"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionCardWrapper__ArgProps,
          internalVariantPropNames: PlasmicSectionCardWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionCardWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionCardWrapper";
  } else {
    func.displayName = `PlasmicSectionCardWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionCardWrapper = Object.assign(
  // Top-level PlasmicSectionCardWrapper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headContent: makeNodeComponent("headContent"),
    text: makeNodeComponent("text"),
    cards: makeNodeComponent("cards"),
    // Metadata about props expected for PlasmicSectionCardWrapper
    internalVariantProps: PlasmicSectionCardWrapper__VariantProps,
    internalArgProps: PlasmicSectionCardWrapper__ArgProps
  }
);

export default PlasmicSectionCardWrapper;
/* prettier-ignore-end */
