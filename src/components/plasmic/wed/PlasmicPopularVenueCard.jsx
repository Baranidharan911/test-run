// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ciGKDfqapgtMVQBmmP938S
// Component: JEirYpCTBJHv
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_6Fj7GnKse2OD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6Fj7gnKse2oD/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ciGKDfqapgtMVQBmmP938S/projectcss
import sty from "./PlasmicPopularVenueCard.module.css"; // plasmic-import: JEirYpCTBJHv/css

createPlasmicElementProxy;

export const PlasmicPopularVenueCard__VariantProps = new Array();

export const PlasmicPopularVenueCard__ArgProps = new Array(
  "title",
  "image",
  "city"
);

const $$ = {};

function PlasmicPopularVenueCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Historic Sites & Mansions",
          image:
            "https://images.unsplash.com/photo-1585506942812-e72b29cef752?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dGFqJTIwbWFoYWx8ZW58MHwxfDB8fHww"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Fj7GnKse2OD()
  });
  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      href={(() => {
        try {
          return $props.city
            ? `/search/venues?city=${$props.city}&venue=${$props.title}`
            : `/search/venues?venue=${$props.title}`;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"react"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "110vw"
              : "30vw"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "none"
          }
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "80vw" : "22vw"
          }
          height={"30vw"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          width={"22vw"}
        />

        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </section>
      </div>
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "img", "section", "text"],
  freeBox: ["freeBox", "img", "section", "text"],
  img: ["img"],
  section: ["section", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPopularVenueCard__ArgProps,
          internalVariantPropNames: PlasmicPopularVenueCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPopularVenueCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPopularVenueCard";
  } else {
    func.displayName = `PlasmicPopularVenueCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPopularVenueCard = Object.assign(
  // Top-level PlasmicPopularVenueCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicPopularVenueCard
    internalVariantProps: PlasmicPopularVenueCard__VariantProps,
    internalArgProps: PlasmicPopularVenueCard__ArgProps
  }
);

export default PlasmicPopularVenueCard;
/* prettier-ignore-end */
